" Sources of the vimrc inspirations:
" Harris
" Esteban
" http://dougblack.io/words/a-good-vimrc.html

" =============== General =============== {{{
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible      " We're running Vim, not Vi!
" }}}

" This makes vim act like all other editors, buffers can
" exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

" =============== Vundle plugins =============== {{{
" Don't put it at the end because other parts of the config needs plugins
filetype off                  " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#rc()
" let Vundle manage Vundle, required
" To install plugins :PluginInstall
Plugin 'gmarik/vundle'
"Plugin 'tomasr/molokai'
Plugin 'altercation/vim-colors-solarized'
Plugin 'morhetz/gruvbox'
" allows you to use <Tab> for all your insert completion needs
Plugin 'ervandew/supertab'
" Adjusts the shiftwidth and expandtab based on current file
Plugin 'tpope/vim-sleuth'
" Fuzzy file, buffer, mru, tag, etc. finder
Plugin 'kien/ctrlp.vim'
" Nice bottom bar
Plugin 'bling/vim-airline'
" Syntax checking hacks
Plugin 'scrooloose/syntastic'
" A tree explorer
Plugin 'scrooloose/nerdtree'
" All about surroundings: parentheses, brackets, quotes, XML tags
Plugin 'tpope/vim-surround'
" Git gutter for vim
Plugin 'airblade/vim-gitgutter'
" Visual undo tree
Plugin 'sjl/gundo.vim'
" Puppet linter
Plugin 'rodjek/vim-puppet'
" }}}


" =============== Plugins settings =================== {{{

" ==== Ctrlp settings ====
let g:ctrlp_match_window = 'results:100' " overcome limit imposed by max height
" ==== Vim Airline ====
" Activate vim-airline
set laststatus=2
" ==== Powerline ====
"set encoding=utf-8
"python from powerline.vim import setup as powerline_setup
"python powerline_setup()
"python del powerline_setup
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
set laststatus=2
" }}}


" =============== Tmux =================== {{{
" allows cursor change in tmux mode
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
" }}}


" =============== Colors =============== {{{
syntax enable    " enable syntax processing
set t_Co=256
set background=dark " Setting dark mode
colorscheme gruvbox
" CERN settings - enable it on lxplus
"let g:solarized_termcolors=256
"syntax enable
"set background=dark
"let g:solarized_visibility = "high"
"let g:solarized_contrast = "high"
"colorscheme solarized
"colorscheme ron " Cause I can't configure solarized properly
" }}}


" =============== Spaces and tabs =============== {{{
set tabstop=4           " 4 space tab
set softtabstop=4       " 4 space tab
set shiftwidth=4
set expandtab           " use spaces for tabs
set smartindent
set smarttab
set modelines=1
filetype indent on
filetype plugin on
" Display tabs and trailing spaces visually
set list listchars=tab:\ \ ,trail:Â·
"set nowrap       "Don't wrap lines
set linebreak    "Wrap lines at convenient points
" }}}


" =============== UI Layout ================ {{{
set number                      " display line numbers
set showcmd                     " show command in bottom bar
set nocursorline                " highlight current line
set wildmenu                    " visual autocomplete for command menu
set lazyredraw                  " redraw only when we need to
set showmatch                   " higlight matching parenthesis
set cursorline                  "Line to indicate the cursor location
set mouse=a                     "Allow mouse in all modes
"set ttymouse=xterm2
set history=1000                "Store lots of :cmdline history
set gcr=a:blinkon0              "Disable cursor blink
set visualbell                  "No sounds
set autoread                    "Reload files changed outside vim
" }}}


" ================ Scrolling ======================== {{{
" Keep last 10 lines visible when scrolling
set scrolloff=10
set sidescrolloff=15
set sidescroll=1
" Disabled relative numbers - apparently they make Vim slow and I don't use it
" anyway
" set relativenumber              "Line number relative to cursor position
" }}}


" ================ Searching ======================== {{{
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
" }}}


" ================ Folding ======================== {{{
set foldlevelstart=10   " open most folds by default
set foldmethod=indent   "fold based on indent
set foldnestmax=10       "deepest fold is 3 levels
set nofoldenable        "don't fold by default
" }}}


" ================= Autocompletion ====================== {{{
autocmd BufEnter * :syntax sync fromstart
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow"
" Remap code completion to Ctrl+Tab (gui and termial)
inoremap <Nul> <C-x><C-o>
inoremap <C-Tab> <C-x><C-o>
" }}}


" ================ Commands ======================== {{{
" Allow saving of files as sudo when I forgot to start vim using sudo.
command W w !sudo tee % > /dev/null
" Treat :Q as :q - common mistake
command! -bang Q q<bang>
" }}}


" ================= Commit messages ================ {{{
" Commit message - max 72 chars
au FileType gitcommit set tw=72
" Remove asterisk from automatic word wrapping in commit messages
set comments=fb:*
" }}}


" ================ Persistent Undo ================== {{{
" Keep undo history across sessions, by storing in file.
" Only works all the time.

if version >= 703
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif
" }}}


" ================ Spell checking ======================== {{{
set spell spelllang=en_us
hi clear SpellBad
"I want to start vim with spell-check disabled
hi SpellBad cterm=underline ctermfg=red
set nospell
" Fix spelling with <leader>f
nnoremap <leader>f 1z=
" }}}


" =============== Custom leader =============== {{{
let mapleader = "\<Space>"
" }}}


" ================ Shortcuts ======================== {{{
" Pressing <leader>s will toggle and untoggle spell checking
map <leader>s :setlocal spell!<cr>
" Open NERDTree like in sublime: ctrl+k, ctrl+b
map <silent> <C-k> <C-b> :NERDTreeToggle<CR>
" List open buffers and then select buffer number to switch
nnoremap <leader>b :buffers<CR>:buffer<Space>
" Toogle relative/nonrelative line numbers
nnoremap <leader>l :set norelativenumber!<CR>
" Press  F2 to toogle paste mode
set pastetoggle=<F2>
" Toogle line numbers
nnoremap <leader>n :set invnumber<CR>
" Press // when selected some text in visual mode to find next occurence of this text
vnoremap // y/<C-R>"<CR>
" Turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>
" toggle gundo
nnoremap <leader>u :GundoToggle<CR>
" run syntax check
nnoremap <leader>c :SyntasticCheck<CR>:Errors<CR>

" }}}


" ================ Virtualenv ======================== {{{
" Add the virtualenv's site-packages to vim path
if has('python')
py << EOF
import os.path
import sys
import vim
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, project_base_dir)
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF
endif
" }}}

" Fix for backspace on Mac OS
set backspace=indent,eol,start

" vim:foldmethod=marker:foldlevel=0
